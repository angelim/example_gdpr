exit
record.inbound?
contents['from'] = Gdpr::REPLACE_STRING if record.inbound?
contents = JSON.parse(record.contents)
record.contents
parse_and_replace_contents(record)
c
exit
parse_and_replace_contents(record)
record
recor
c
exit
next
scrubber
c
scrubber
c
scrubber
exit
scrubber
c
scrubber
exit
c
scrubber
n
exit
scrubber
exit
default.to_s.constantize
default.to_s
default
scrubber_klass
n
scrubber
c
record
c
gdpr_records
exit
s.gdpr_records.first
s.gdpr_records.count
s.gdpr_records
s = Gdpr::CustomLegScrubber.new(1, 'aangelim')
c
exit
s.gdpr_records
s = Gdpr::CustomLegScrubber.new(1, 'aangelim')
call.legs.count
c
call.legs
exit
Gdpr
c
exit
Gdpr
Merda
exit
ActiveSupport::Inflector::Inflections.methods.grep /safe/
ActiveSupport::Inflector::Inflections.new.methods.grep /safe/
ActiveSupport::Inflector::Inflections.new.safe_constantize
ActiveSupport::Inflector::Inflections.new
ActiveSupport::Inflector::Inflections.safe_constantise
ActiveSupport::Inflector::Inflections.safe_constantize
ActiveSupport::Inflector.methods
ActiveSupport::Inflector.methods.grep /cons/
ActiveSupport::Inflector.methods.grep /safe/
ActiveSupport::Inflector.safe_constantise
ActiveSupport::Inflector.safe_constantize
ActiveSupport::Inflector.new
ActiveSupport::Inflector
c
exit
Call.where
find_by_user_id(user_id).class
find_by_user_id(user_id)
c
Call.all
c
exit
Call.first
call_1
exit
Call.first
call_1
exit
User.first
[u,u1,u2].each(&:save)
User.count
u2 = User.new(name: 'bia')
u1 = User.new(name: 'ale')
u = User.new(name: 'ale')
exit
u = User.new(name: 'ale')
exit
Call.where
exit
Call.find(70331613856080).to
Call.find(70331613856080)
Call.last.to
Call.last == call_1
Call.last == call_2
Call.last
Call.first
call_2
call_2.save
call_2 = Call.new({ from: '5', to: '6', direction: 'inbound', user_id: 2 })
c
c = Call.create(user_id: 1, direction: 'inbound', from: '1', to: '2')
Call.last.user_id
Call.last.user_id\
Call.last
Call.find_by_attribute(:user_id, 1)
Call.where
Call.where(
Call.first == call_1
Call.first
Call.all
call_1.persisted?
call_1.valid?
Call.first
call_1
Call.all
exit
first.to
first.save
first.errors
first.valid?
first
all
c
exit
self.new.respond_to?(:where)
self.respond_to?(:where)
self.methods
self.class_methods
self
exit
call
call = Call.create(call_attrs)
call.errors
call
call = Call.create(call_attrs)
Call.new(call_attrs).tap(&:save)
call = Call.create(call_attrs)
call_attrs
call_atts
call
exit
Call.count
Call.last
Call.first
call
exit
call.attribute_aliases
call.attributes
call.direction
call.methods
call.instance_methods
call.attributes
